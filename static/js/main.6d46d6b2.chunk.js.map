{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","ErrorBoundary.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchchange","className","type","placeholder","onChange","Card","props","name","email","id","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","state","hasError","this","setState","children","React","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","data","catch","console","log","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4NAgBeA,EAdG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKC,UAAU,OACf,2BACAA,UAAU,mCACVC,KAAK,SACJC,YAAY,gBACZC,SAAYJ,MCOAK,EAdF,SAACC,GAAU,IAChBC,EAAoBD,EAApBC,KAAOC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACrB,OACC,yBAAKR,UAAW,uDACf,yBAAKS,IAAK,QAAQC,IAAG,+BAA0BF,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCcQI,EAnBE,SAAC,GAAkB,IAAfC,EAAc,EAAdA,OAErB,OACC,6BACEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACD,kBAAC,EAAD,CACCC,IAAKD,EACJP,GAAIM,EAAKN,GACTF,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCUFU,E,kDArBd,aAAc,IAAD,8BACZ,gBACKC,MAAO,CACXC,UAAU,GAHC,E,gEAQZC,KAAKC,SAAS,CAACF,UAAS,M,+BAGxB,OAAGC,KAAKF,MAAMC,SACN,wDAGDC,KAAKf,MAAMiB,a,GAhBQC,IAAMC,WCQnBC,EARA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAY,SAAWC,OAAS,kBAAoBC,OAAO,UACvExB,EAAMiB,WC4CMQ,G,wDAxCd,aAAc,IAAD,8BACZ,gBAMFC,eAAiB,SAACC,GACjB,EAAKX,SAAS,CAACY,YAAcD,EAAME,OAAOC,SANzC,EAAKjB,MAAO,CACXN,OAAO,GACPqB,YAAc,IAJH,E,gEAaQ,IAAD,OACpBG,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAI,OAAI,EAAKnB,SAAS,CAACT,OAAO4B,OACpCC,MAAMC,QAAQC,O,+BAGN,IAAD,OACDC,EAAiBxB,KAAKF,MAAMN,OAAOiC,QAAO,SAAAC,GAChD,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAK9B,MAAMe,YAAYc,kBAEhE,OACA,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,WAAd,eACA,kBAAC,EAAD,CAAWD,aAAcqB,KAAKW,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAUnB,OAAQgC,W,GA/BFrB,IAAMC,Y,YCIJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD0H1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.6d46d6b2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) =>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search'\r\n\t\t placeholder='Serach Robots' \r\n\t\t onChange = {searchchange}\r\n\t\t />\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\tconst {name , email, id} = props\r\n\treturn (\r\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n\t\t\t<img alt ='Robot' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t<h1>{name}</h1>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card ;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ( { robots } ) => {\r\n\t\r\nreturn (\r\n\t<div>\r\n\t\t{robots.map((user,i) => {\r\n\t\t  return (\r\n\t\t\t<Card \r\n\t\t\t\tkey={i}\r\n\t\t\t\t id={user.id} \r\n\t\t\t\t name={user.name} \r\n\t\t\t\t email={user.email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCarch(){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooooops that is not good</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t} \r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY : 'scroll' , border : '5px solid black' , height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\n// import {robots} from './robots' ;\r\nimport ErrorBoundary from './ErrorBoundary'\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper() \r\n\t\tthis.state ={\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield : '' \r\n\t\t}\r\n\t}\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield : event.target.value})\r\n\t\r\n\t// console.log(filteredRobots);\r\n}\r\n\r\ncomponentDidMount () {\r\n\tfetch('http://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then (data => this.setState({robots:data}))\r\n\t.catch(console.log);\r\n}\r\n\t\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t})\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t <h1 className='f2 head'>RoboFriends</h1>\r\n\t\t <SearchBox searchchange={this.onSearchChange} />\r\n\t\t <Scroll>\r\n\t\t <ErrorBoundary>\r\n\t\t<CardList robots={filteredRobots}/>\r\n\t\t</ErrorBoundary>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport 'tachyons'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <App/>,document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}